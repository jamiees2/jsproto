import type { BinaryReader, Message, BinaryDecoder } from 'google-protobuf';
import * as BinaryConstants from './constants';
import type { ByteSource, BinaryReadCallback, BinaryReadValue, AnyFieldType, BinaryReadReader, SplitConverter } from './types';
export default class ProtoReader implements BinaryReader {
    private reader;
    private useLong;
    private nextFieldNumber;
    private fieldCursor;
    private nextWireType;
    private callbacks;
    constructor(buffer: ByteSource, start?: number, length?: number, useLong?: boolean);
    static alloc(buffer: ByteSource, start?: number, length?: number, useLong?: boolean): ProtoReader;
    alloc(buffer: ByteSource, start?: number, length?: number, useLong?: boolean): ProtoReader;
    free(): void;
    getFieldCursor(): number;
    getCursor(): number;
    getBuffer(): Uint8Array;
    getFieldNumber(): number;
    getWireType(): BinaryConstants.WireType;
    isEndGroup(): boolean;
    getError(): boolean;
    setBlock(bytes?: ByteSource, start?: number, length?: number): void;
    reset(): void;
    advance(count: number): void;
    nextField(): boolean;
    unskipHeader(): void;
    skipMatchingFields(): void;
    skipVarintField(): void;
    skipDelimitedField(): void;
    skipFixed32Field(): void;
    skipFixed64Field(): void;
    skipGroup(): void;
    skipField(): void;
    registerReadCallback(callbackName: string, callback: BinaryReadCallback): void;
    runReadCallback(callbackName: string): BinaryReadValue;
    readAny(fieldType: BinaryConstants.FieldType): AnyFieldType;
    readMessage(msg: BinaryReadValue, decode: BinaryReadReader): void;
    readGroup(field: number, message: Message, reader: BinaryReadReader): void;
    getFieldDecoder(): BinaryDecoder;
    readInt32(): number;
    readInt32String(): string;
    readInt64(): number;
    readInt64String(): string;
    readUint32(): number;
    readUint32String(): string;
    readUint64(): number;
    readUint64String(): string;
    readSint32(): number;
    readSint64(): number;
    readSint64String(): string;
    readFixed32(): number;
    readFixed64(): number;
    readFixed64String(): string;
    readSfixed32(): number;
    readSfixed32String(): string;
    readSfixed64(): number;
    readSfixed64String(): string;
    readFloat(): number;
    readDouble(): number;
    readBool(): boolean;
    readEnum(): number;
    readString(): string;
    readBytes(): Uint8Array;
    readVarintHash64(): string;
    readSintHash64(): string;
    readFixedHash64(): string;
    readSplitVarint64(convert: SplitConverter): object;
    readSplitZigzagVarint64(convert: SplitConverter): object;
    readSplitFixed64(convert: SplitConverter): object;
    readPackedField_<T>(callback: () => T): T[];
    readPackedInt32(): number[];
    readPackedInt32String(): string[];
    readPackedInt64(): number[];
    readPackedInt64String(): string[];
    readPackedUint32(): number[];
    readPackedUint32String(): string[];
    readPackedUint64(): number[];
    readPackedUint64String(): string[];
    readPackedSint32(): number[];
    readPackedSint64(): number[];
    readPackedSint64String(): string[];
    readPackedFixed32(): number[];
    readPackedFixed64(): number[];
    readPackedFixed64String(): string[];
    readPackedSfixed32(): number[];
    readPackedSfixed64(): number[];
    readPackedSfixed64String(): string[];
    readPackedFloat(): number[];
    readPackedDouble(): number[];
    readPackedBool(): boolean[];
    readPackedEnum(): number[];
    readPackedVarintHash64(): string[];
    readPackedFixedHash64(): string[];
}
